// Generated by CoffeeScript 1.10.0
(function() {
  var DEFAULT_OPTIONS, _, createTestDoubleObject, createTestDoubleViaProxy, createTestDoublesForFunctionBag, createTestDoublesForFunctionNames, createTestDoublesForPrototype, description, getAllPropertyNames, nameOf, tdFunction, withDefaults;

  _ = {
    extend: require('lodash/extend'),
    functions: require('lodash/functions'),
    includes: require('lodash/includes'),
    isArray: require('lodash/isArray'),
    isFunction: require('lodash/isFunction'),
    isPlainObject: require('lodash/isPlainObject'),
    isString: require('lodash/isString'),
    reduce: require('lodash/reduce'),
    tap: require('lodash/tap'),
    union: require('lodash/union')
  };

  tdFunction = require('./function');

  DEFAULT_OPTIONS = {
    excludeMethods: ['then']
  };

  module.exports = function(nameOrType, config) {
    return _.tap(createTestDoubleObject(nameOrType, withDefaults(config)), function(obj) {
      return obj.toString = function() {
        return description(nameOrType);
      };
    });
  };

  createTestDoubleObject = function(nameOrType, config) {
    if (_.isFunction(nameOrType)) {
      return createTestDoublesForPrototype(nameOrType);
    } else if (_.isPlainObject(nameOrType)) {
      return createTestDoublesForFunctionBag(nameOrType);
    } else if (_.isArray(nameOrType)) {
      return createTestDoublesForFunctionNames(nameOrType);
    } else {
      return createTestDoubleViaProxy(nameOrType, config);
    }
  };

  getAllPropertyNames = function(type) {
    var props;
    props = [];
    while (true) {
      props = _.union(props, Object.getOwnPropertyNames(type));
      if (!(type = Object.getPrototypeOf(type))) {
        break;
      }
    }
    return props;
  };

  createTestDoublesForPrototype = function(type) {
    return _.reduce(getAllPropertyNames(type.prototype), function(memo, name) {
      memo[name] = _.isFunction(type.prototype[name]) ? tdFunction((nameOf(type)) + "#" + name) : type.prototype[name];
      return memo;
    }, {});
  };

  createTestDoublesForFunctionBag = function(bag) {
    return _.reduce(_.functions(bag), function(memo, functionName) {
      memo[functionName] = tdFunction("." + functionName);
      return memo;
    }, _.extend({}, bag));
  };

  createTestDoublesForFunctionNames = function(names) {
    return _.reduce(names, function(memo, functionName) {
      memo[functionName] = tdFunction("." + functionName);
      return memo;
    }, {});
  };

  createTestDoubleViaProxy = function(name, config) {
    var obj, proxy;
    return proxy = new Proxy(obj = {}, {
      get: function(target, propKey, receiver) {
        if (!obj.hasOwnProperty(propKey) && !_.includes(config.excludeMethods, propKey)) {
          obj[propKey] = proxy[propKey] = tdFunction((nameOf(name)) + "#" + propKey);
        }
        return obj[propKey];
      }
    });
  };

  withDefaults = function(config) {
    return _.extend({}, DEFAULT_OPTIONS, config);
  };

  nameOf = function(nameOrType) {
    if (_.isFunction(nameOrType) && (nameOrType.name != null)) {
      return nameOrType.name;
    } else if (_.isString(nameOrType)) {
      return nameOrType;
    } else {
      return '';
    }
  };

  description = function(nameOrType) {
    var name;
    name = nameOf(nameOrType);
    return "[test double object" + (name ? " for \"" + name + "\"" : '') + "]";
  };

}).call(this);
