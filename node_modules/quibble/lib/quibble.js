// Generated by CoffeeScript 1.10.0
(function() {
  var Module, _, config, doWithoutCache, fakeLoad, hackErrorStackToGetCallerFile, ignoredCallerFiles, originalLoad, path, quibble, quibbles, requireWasCalledFromAFileThatHasQuibbledStuff;

  _ = require('lodash');

  Module = require('module');

  path = require('path');

  originalLoad = Module._load;

  config = null;

  quibbles = {};

  ignoredCallerFiles = [];

  module.exports = quibble = function(request, stub) {
    request = quibble.absolutify(request);
    Module._load = fakeLoad;
    quibbles[request] = {
      callerFile: hackErrorStackToGetCallerFile(),
      stub: (arguments.length < 2 ? config.defaultFakeCreator(request) : stub)
    };
    return quibbles[request].stub;
  };

  quibble.config = function(userConfig) {
    return config = _.extend({}, {
      defaultFakeCreator: function(request) {
        return {};
      }
    }, userConfig);
  };

  config = quibble.config();

  quibble.ignoreCallsFromThisFile = function(file) {
    if (file == null) {
      file = hackErrorStackToGetCallerFile(false);
    }
    return ignoredCallerFiles = _.uniq(ignoredCallerFiles.concat(file));
  };

  quibble.reset = function(hard) {
    if (hard == null) {
      hard = false;
    }
    Module._load = originalLoad;
    quibbles = {};
    config = quibble.config();
    if (hard) {
      return ignoredCallerFiles = [];
    }
  };

  quibble.absolutify = function(relativePath, parentFileName) {
    if (parentFileName == null) {
      parentFileName = hackErrorStackToGetCallerFile();
    }
    if (_.startsWith(relativePath, '/') || /^\w/.test(relativePath)) {
      return relativePath;
    }
    return path.resolve(path.dirname(parentFileName), relativePath);
  };

  fakeLoad = function(request, parent, isMain) {
    request = quibble.absolutify(request, parent.filename);
    if (quibbles.hasOwnProperty(request)) {
      return quibbles[request].stub;
    } else if (requireWasCalledFromAFileThatHasQuibbledStuff()) {
      return doWithoutCache(request, parent, function() {
        return originalLoad(request, parent, isMain);
      });
    } else {
      return originalLoad(request, parent, isMain);
    }
  };

  requireWasCalledFromAFileThatHasQuibbledStuff = function() {
    var i, len, q, ref;
    ref = _.values(quibbles);
    for (i = 0, len = ref.length; i < len; i++) {
      q = ref[i];
      if (q.callerFile === hackErrorStackToGetCallerFile()) {
        return true;
      }
    }
  };

  doWithoutCache = function(request, parent, thingToDo) {
    var cachedThing, filename;
    filename = Module._resolveFilename(request, parent);
    if (!Module._cache.hasOwnProperty(filename)) {
      return thingToDo();
    }
    cachedThing = Module._cache[filename];
    delete Module._cache[filename];
    return _.tap(thingToDo(), function() {
      return Module._cache[filename] = cachedThing;
    });
  };

  hackErrorStackToGetCallerFile = function(includeGlobalIgnores) {
    var callerFile, currentFile, e, originalFunc;
    if (includeGlobalIgnores == null) {
      includeGlobalIgnores = true;
    }
    originalFunc = Error.prepareStackTrace;
    Error.prepareStackTrace = function(e, stack) {
      return stack;
    };
    e = new Error();
    currentFile = e.stack[0].getFileName();
    callerFile = _(e.stack).invoke('getFileName').reject(function(f) {
      return includeGlobalIgnores && _.include(ignoredCallerFiles, f);
    }).select(path.isAbsolute).find(function(f) {
      return f !== currentFile;
    });
    Error.prepareStackTrace = originalFunc;
    return callerFile;
  };

}).call(this);
